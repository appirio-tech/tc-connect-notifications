version: 2
defaults: &defaults
  docker:
    - image: circleci/node:6.14-stretch-browsers
    # environment variables for all commands executed in the primary container
  environment:
    NODE_ENV: test
    LOG_LEVEL: debug
    AUTH_DOMAIN: topcoder-dev.com
    AUTH_SECRET: secret
    API_URL_PROJECTS: http://localhost:3001/v4/projects
    API_URL_MEMBERS: http://localhost:3001/v3/members
    API_URL_USERS: http://localhost:3001/v3/users
    API_URL_AUTHORIZATIONS: http://localhost:3001/v3/authorizations
    API_URL_TOPICS: http://localhost:3001/v5/topics

install_dependency: &install_dependency
          name: Installation of build and deployment dependencies.
          command: |
            sudo apt-get update && sudo apt-get install -y python-pip
            sudo pip install awscli
            sudo apt-get install curl
            curl --version
            sudo apt-get install bash
            sudo apt install bash 
            

install_deploysuite: &install_deploysuite
          name: Installation of install_deploysuite.
          command: |
            git clone --branch v1.3 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
            cp ./../buildscript/master_deploy.sh .
            cp ./../buildscript/buildenv.sh .
            cp ./../buildscript/awsconfiguration.sh .

install_docker_compose: &install_docker_compose
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.10.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
            docker-compose version

restore_cache_settings_for_test: &restore_cache_settings_for_test
  key: node-modules-{{ checksum "package.json" }}

save_cache_settings_for_test: &save_cache_settings_for_test
  key: node-modules-{{ checksum "package.json" }}
  paths:
    - node_modules

run_build: &run_build
          name: Build of Docker image
          command: |
             chmod +x build.sh
             ./build.sh

jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *restore_cache_settings_for_test
      - run: npm install
      - save_cache: *save_cache_settings_for_test
      - run:
          name: Install and setup Rabbitmq
          command: |
            echo 'deb http://www.rabbitmq.com/debian/ testing main' | sudo tee /etc/apt/sources.list.d/rabbitmq.list
            wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -
            sudo apt-get -y install apt-transport-https
            sudo apt-get update --fix-missing
            sudo apt-get install rabbitmq-server
            sudo service rabbitmq-server start
            sudo cp local/rabbitmq_delayed_message_exchange-0.0.1.ez /usr/lib/rabbitmq/lib/rabbitmq_server-*/plugins
            sudo rabbitmq-plugins enable rabbitmq_delayed_message_exchange
            sudo service rabbitmq-server restart
      - run: npm run test
      - store_artifacts:
          path: coverage

  deploy_dev:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: *install_docker_compose
      - run: *install_dependency
      - run: *install_deploysuite
      - run: *run_build
      - deploy: 
          name: Running Masterscript - deploy tc-connect-notifications
          command: |    
            echo " Stopping here"
            ./awsconfiguration.sh DEV
            source awsenvconf
            ./buildenv.sh -e DEV -b dev-tc-connect-notifications-deployvar
            source buildenvvar
            echo " Stopping here"
           

  deploy_prod:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: *install_docker_compose
      - run: *install_dependency
      - run: *install_deploysuite
      - run: *run_build
      - deploy: 
          name: Running Masterscript - deploy tc-connect-notifications
          command: |    
            ./awsconfiguration.sh PROD
            source awsenvconf
            ./buildenv.sh -e PROD -b dev-tc-connect-notifications-deployvar
            source buildenvvar
            ./master_deploy.sh -d ECS -e PROD -t latest -s prod-global-appvar,prod-tc-connect-notifications-appvar -i tc-connect-notifications

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - test
      - deploy_prod:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_dev:
          requires:
            - test
          filters:
            branches:
              only: [dev, 'feature/auth0-proxy-server', 'dev-mssts1.3']
